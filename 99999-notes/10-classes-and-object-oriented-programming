____________________________________________________________________________________________________________________________________________

WHAT'S OBJECT-ORIENTED PROGRAMMING

  Approch of planing and reasoning for your code
  Work with (real-life) Entities in your code (movie, ProductList, Person, shoppingCart, etc)

____________________________________________________________________________________________________________________________________________

CLASSES AND INSTANCES

  OBJECTS
    "The things you work with in code."
    Instances of Classses (means based on classes)
  
  CLASSES
    "Blueprints for objects" (creates the objects, theoretical definition)
    Define how objects look like, which properties and methods they have
    Classes make creation of multiple similar objects much easier.

    CLASS-based creation is an alternative to using object literals!
____________________________________________________________________________________________________________________________________________

CLASS FIELDS (VS PROPERTIES)

class Product { 
  category = ‘DEFAULT’; - (PUBLIC Class Field)
  constructor(title) { 
    this.title = title; - (PUBLIC Class Property)
  } 
  printInfo() { 
    console.log(this.title, this.category); 
  } - (PUBLIC Class Method)
}

____________________________________________________________________________________________________________________________________________

STATIC PROPERTIES, FIELDS, AND METHODS 

Static Field / Property / Method
  Defined with static keyword
  only accessible on class itself, without instantation (i.e. not on instance)
  Typically used in helper classes, global configuration, etc.


Instance Field / Property / Method
  Defined WITHOUT static keyword.
  Only accessible on instances (= objects) based on class
  Used for core, re-usable logic
____________________________________________________________________________________________________________________________________________

WHEN TO USE CLASSES

Are obect literals ({}) obsolete? NO!
  Great for genereal data grouping, objects which you only create once.
  Quick and easy to create, no overhead.
But also consider classes.
  Great when you re-create the same type of object over and over again
  More overhead initially but easy "object duplication" thereafter.
____________________________________________________________________________________________________________________________________________

INHERITANCE

Usually has a base class that then shares with other classes and can be added to.
Used to extend the base class.

____________________________________________________________________________________________________________________________________________

PRIVATE FIELDS, PROPERTIES, AND METHODS

PUBLIC
  Accessible OUTSIDE of the class/object
  the "Things" you work with in your other code


PRIVATE
  Accessible ONLY INSIDE of the class / object
  The "things" you work with in your class only (to split & re-use code)
  Example includes Hard-coding (fallback) values, re-used class specific logic

____________________________________________________________________________________________________________________________________________
